from typing import Any

class Node:
    def __init__(self, value=None): #tworzenie wezla listy
        self.value = value #wartosc w liscie
        self.next = None #wartosc kolejnego

class LinkedList():
    def __init__(self): #element head wchodzacy do node i tail jako element wchodzacy od konca
        self.head = None
        self.tail = None

    def push(self, value:Any) -> None: #metoda umieszczajaca na poczatek listy
        new_node = Node(value) #wartosc nowego node
        new_node.next = self.head #przekaz do head
        self.head = new_node #head przyjmuje wartosc przekazana w nowym nodzie

    def append(self, value:Any) -> None: #metoda umieszczajaca nowy wezel na koniec listy
        new_node = Node(value) #wartosc nowego node
        if (self.head == None): #jesli head jest pusty
            self.head = new_node #zastap head nowym nodem
            return
        current = self.head #zwroc lub kontynuuj w headzie
        while(current.next): #petla jezdzaca po aktualnych elementach
            current = current.next
        current.next = new_node #wstawienie aktualnych wartosci do nowego node

    def node(self, at: int) -> Node: #metoda zwracajaca wezel
        node = self.head #zmienna do heada
        if (self.head == None): #jesli head pusty to pokaz empty i zwroc
            print("empty")
            return
        for x in range(at): #petla jezdzaca po kolejnych nodach i zwraca wezel
            node = node.next
        return node

    def __len__(self): #metoda zliczajaca ilosc elementow w wezle
        node = self.head
        if (self.head == None):
            return 0
        licznik = 0
        while (node.next):#petla jezdzaca po kolejnych nodach i sumujaca elementy
            node = node.next
            licznik += 1
        return licznik + 1

    def insert(self, value: Any, after: Node) -> None: #wstawi nowy wezel za wezlem
        node = Node(value)
        node.next = after.next #wstaw wezel za aktualnym wezlem
        after.next = node

    def remove_last(self) -> Any: #metoda usuwajaca ostatni element i go zwraca
        if (self.head == None):
            print("empty")
            return
        node = self.head
        node2 = self.head
        if (self.head.next == None): #pomocnicza zmienna
            temp = self.head
            self.head = None
            return temp
        while (node.next != None): #petla jezdzaca po kolejnych elementach
            node = node.next
        while (node2.next != node): #jesli przejedzie na koniec to zwraca pomocnicza czyli ostatni element
            node2 = node2.next
        temp = node
        node2.next = None
        return temp

    def pop(self) -> Any: #metoda podobna do remove last tylko ze usuwa pierwszy element i go zwraca
        if (self.head == None):
            print("empty")
            return
        current = self.head
        self.head = current.next
        return current.value

    def remove(self, after: Node) -> Any: #metoda usuwajaca nastepnik wezla
        if (self.head == None):
            print("empty")
            return
        node = after.next #podmianka kolejnego wezla z aktualnym
        node2 = node.next
        after.next = node2

    def __str__(self): #metoda wypisujaca na ekran
        node = self.head
        text = ""
        while node is not None:
            text += str(node.value)
            if node.next is not None: #petla dla elementow i do wstawiania pomiedzy nimi ->
                text += " -> "
            node = node.next
        return text



# lista = LinkedList() #utworzenie obiektu
# print("MOja lista: ")
# lista.append(1) #wstawianie wartosci do listy
# lista.append(2)
# lista.append(3)
# lista.append(4)
# lista.append(5)
# lista.append(6)
# lista.append(7)
# print(lista)
# print("Zero na poczatku: \n")
# lista.push(0)
# print(lista)
# print("Usuniecie ostatniego: \n")
# lista.remove_last()
# print(lista)
# print("Usuniecie pierwszego: \n")
# lista.pop()
# print(lista)
# print("Usuniecie wezla 3: \n")
# lista.remove(after=lista.node(1))
# print(lista)
# print("Aktualna dlugosc listy: \n")
# print(len(lista))




class Stack():
    _storage: LinkedList() #korzystam z klasy Linkedlist

    def __init__(self): #utworzenie head dla tej klasy
        self.head = None

    def push(self, value: Any) -> None: #dodawanie na koncu listy
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node #wartosc Node jest teraz na koncu listy

    def __len__(self): #dlugosc stosu
        print(" ")
        node = self.head
        if self.head == None:
            return 0
        licznik = 0
        while (node.next != None):
            node = node.next
            licznik += 1
        return licznik + 1

    def pop(self) -> Any: #zwroci i usunie ze szczytu stosu
        if (self.head == None):
            print("empty")
            return
        current = self.head
        self.head = current.next
        return current.value

    def __str__(self): #wyswietl co sie znajduje w stosie
        node = self.head
        text = ""
        while node is not None:
            text += str(node.value)
            if node.next is not None:
                text += "\n"
            node = node.next
        return text


# stack = Stack()
# stack.push(5)
# stack.push(10)
# stack.push(20)
# print(stack)
# print(" ")
# print(stack.pop())
# print(" ")
# print(stack)
# print(len(stack))


class Queue():
    _storage: LinkedList #korzystam z klasy LInkedList

    def __init__(self):
        self.head = None

    def peek(self) -> Any: #zwroci wartosc pierwszego elementu w kolejce
        node = self.head
        if (node == None):
            print("empty")
            return
        return node.value

    def enqueue(self, value: Any) -> None: #umiesci nowy element na koncu kolejki
        new_node = Node(value)
        if (self.head == None):
            self.head = new_node #head jako new_mode
            return
        current = self.head
        while (current.next): #petla jezdzaca po kolejnych elementach i umiejscawia nowy element na koniec kolejki
            current = current.next
        current.next = new_node

    def dequeue(self) -> Any: #zwroci i usunie pierwszy element w kolejce
        if (self.head == None):
            print("empty")
            return
        current = self.head
        self.head = current.next
        return current.value

    def __len__(self):
        print(" ")
        node = self.head
        if self.head == None:
            return 0
        licznik = 0
        while (node.next != None):
            node = node.next
            licznik += 1
        return licznik + 1

    def __str__(self):
        node = self.head
        text = ""
        while node is not None:
            text += str(node.value)
            if node.next is not None:
                text += ", "
            node = node.next
        return text


queue = Queue()
queue.enqueue('klient 1')
queue.enqueue('klient 2')
queue.enqueue('klient 3')
queue.enqueue('klient 4')
queue.enqueue('klient 5')
print("pierwszy w kolejce: " + queue.peek())
print(queue)
queue.dequeue()
print(queue)
print(len(queue))
