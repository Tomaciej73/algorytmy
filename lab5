from typing import *


class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value):
        self.value = value
        self.left_child = None
        self.right_child = None

    def is_leaf(self):
        if self.right_child is None and self.left_child is None:
            return True
        return False

    def add_left_child(self, value: Any):
        self.left_child = BinaryNode(value)

    def add_right_child(self, value: Any):
        self.right_child = BinaryNode(value)

    def traverse_in_order(self):
        if self.left_child is not None:
            type(self).traverse_in_order(self.left_child)
        print(self.value)
        if self.right_child is not None:
            type(self).traverse_in_order(self.right_child)

    def traverse_in_order(self, visit: Callable[[Any], None]):
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        visit(self)
        print(self.value)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]):
        if self.left_child is not None:
            self.left_child.traverse_post_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_post_order(visit)
        visit(self)
        print(self.value)

    def traverse_pre_order(self, visit: Callable[[Any], None]):
        visit(self)
        print(self.value)
        if self.left_child is not None:
            self.left_child.traverse_pre_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_pre_order(visit)


class BinaryTree:
    root: BinaryNode

    def __init__(self, value):
        self.root = BinaryNode(value)

    def traverse_in_order(self, visit: Callable[[Any], None]):
        self.root.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]):
        self.root.traverse_post_order(visit)

    def traverse_pre_order(self, visit: Callable[[Any], None]):
        self.root.traverse_pre_order(visit)

    def show(self):
        pass


el_10 = BinaryNode(10)
el_9 = BinaryNode(9)
el_2 = BinaryNode(2)
el_1 = BinaryNode(1)
el_3 = BinaryNode(3)
el_4 = BinaryNode(4)
el_6 = BinaryNode(6)

el_10.left_child = el_9
el_10.right_child = el_2
el_9.left_child = el_1
el_9.right_child = el_3
el_2.left_child = el_4
el_2.right_child = el_6

el_10.traverse_in_order(BinaryNode)
print("-----------")
el_10.traverse_post_order(BinaryNode)
print("-----------")
el_10.traverse_pre_order(BinaryNode)
