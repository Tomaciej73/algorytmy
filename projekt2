# Python3 program to print Bottom
# View of Binary Tree
class Node:
     
    def __init__(self, key = None,
                      left = None,
                     right = None):
                          
        self.data = key
        self.left = left
        self.right = right
         
def printBottomView(root):
     
      # Create a dictionary where
    # key -> relative horizontal distance
    # of the node from root node and
    # value -> pair containing node's
    # value and its level
    d = dict()
     
    printBottomViewUtil(root, d, 0, 0)
     
    # Traverse the dictionary in sorted
    # order of their keys and print
    # the bottom view
    for i in sorted(d.keys()):
        print(d[i][0], end = " ")
 
def printBottomViewUtil(root, d, hd, level):
     
      # Base case
    if root is None:
        return
     
    # If current level is more than or equal
    # to maximum level seen so far for the
    # same horizontal distance or horizontal
    # distance is seen for the first time,
    # update the dictionary
    if hd in d:
        if level >= d[hd][1]:
            d[hd] = [root.data, level]
    else:
        d[hd] = [root.data, level]
         
    # recur for left subtree by decreasing
    # horizontal distance and increasing
    # level by 1
    printBottomViewUtil(root.left, d, hd - 1,
                                   level + 1)
     
    # recur for right subtree by increasing
    # horizontal distance and increasing
    # level by 1
    printBottomViewUtil(root.right, d, hd + 1,
                                    level + 1)
 
# Driver Code   
if __name__ == '__main__':
     
    root = Node(1)
    root.left = Node(2)
    root.right = Node(3)
    root.left.left = Node(4)
    root.right.right = Node(7)
    root.left.right = Node(5)
    root.left.left.left = Node(8)
    root.left.left.right = Node(9)
     
     
    printBottomView(root)
 
# This code is contributed by tusharroy
