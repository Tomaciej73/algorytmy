from typing import *


class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value):
        self.value = value
        self.left_child = None
        self.right_child = None

    def is_leaf(self):
        if self.right_child is None and self.left_child is None:
            return True
        return False

    def add_left_child(self, value: Any):
        self.left_child = BinaryNode(value)

    def add_right_child(self, value: Any):
        self.right_child = BinaryNode(value)

    def traverse_in_order(self):
        if self.left_child is not None:
            type(self).traverse_in_order(self.left_child)
        print(self.value)
        if self.right_child is not None:
            type(self).traverse_in_order(self.right_child)

    def traverse_in_order(self, visit: Callable[[Any], None]):
        if self.left_child is not None:
            self.left_child.traverse_in_order(visit)
        visit(self)
        print(self.value)
        if self.right_child is not None:
            self.right_child.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]):
        if self.left_child is not None:
            self.left_child.traverse_post_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_post_order(visit)
        visit(self)
        print(self.value)

    def traverse_pre_order(self, visit: Callable[[Any], None]):
        visit(self)
        print(self.value)
        if self.left_child is not None:
            self.left_child.traverse_pre_order(visit)
        if self.right_child is not None:
            self.right_child.traverse_pre_order(visit)
    def bottom_line(self, visit: Callable[[Any], None]):
        visit(self)
        print(self.value)
        if self.left_child is not None:
            self.left_child.bottom_line(visit)
        if self.right_child is not None:
            self.right_child.bottom_line(visit)

class BinaryTree:
    root: BinaryNode

    def __init__(self, value):
        self.root = BinaryNode(value)

    def traverse_in_order(self, visit: Callable[[Any], None]):
        self.root.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]):
        self.root.traverse_post_order(visit)

    def traverse_pre_order(self, visit: Callable[[Any], None]):
        self.root.traverse_pre_order(visit)

    def show(self):
        pass

    def bottom_line(self, visit: Callable[[Any], None]):
        if (self.root == None):
            return
        glowa = 0
        slownik = dict()
        kolejka = []
        self.root.glowa = glowa
        kolejka.append(BinaryTree)

        while (len(kolejka) != 0):
            stopien = kolejka[0]
            kolejka.pop(0)
            glowa = stopien.glowa
            m[glowa] = stopien.data
            if (stopien.left_child != None):
                stopien.left_child.glowa = glowa - 1
                kolejka.append(temp.left_child)
            if (stopien.right_child != None):
                stopien.right_child.glowa = right_child + 1
                kolejka.append(stopien.right_child)
        for i in sorted(slownik.value()):
            print(slownik[i], end=' ')

root = BinaryNode(10)
root.left_child = BinaryNode(9)
root.right_child = BinaryNode(2)
root.left_child.left_child = BinaryNode(1)
root.left_child.right_child = BinaryNode(3)
root.right_child.right_child = BinaryNode(6)
root.right_child.left_child = BinaryNode(4)

bottom_line(BinaryNode)

